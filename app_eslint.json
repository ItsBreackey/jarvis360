[{"filePath":"D:\\BrandStuff\\BreackeyPortfolio\\ProjectTracker\\jarvis360\\client\\src\\App.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'isMapped' is assigned a value but never used.","line":382,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":382,"endColumn":43},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'devDiag', 'showCustomModalRef', and 'showToastRef'. Either include them or remove the dependency array.","line":754,"column":6,"nodeType":"ArrayExpression","endLine":754,"endColumn":127,"suggestions":[{"desc":"Update the dependencies array to be: [records, monthlySeries, method, monthsOut, holtAlpha, holtBeta, holtBootstrap, holtBootstrapSamples, holtBootstrapAsync, devDiag, showToastRef, showCustomModalRef]","fix":{"range":[37365,37486],"text":"[records, monthlySeries, method, monthsOut, holtAlpha, holtBeta, holtBootstrap, holtBootstrapSamples, holtBootstrapAsync, devDiag, showToastRef, showCustomModalRef]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'estimateFn' is assigned a value but never used.","line":1471,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":1471,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'notify' is assigned a value but never used.","line":1535,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1535,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'estimateChurnFromFeatures' is assigned a value but never used.","line":1565,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1565,"endColumn":34},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'estimateChurnFromFeaturesDetailed'. Either include it or remove the dependency array.","line":1615,"column":6,"nodeType":"ArrayExpression","endLine":1615,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [customers, computeChurnWhenMissing, estimateChurnFromFeaturesDetailed]","fix":{"range":[91379,91415],"text":"[customers, computeChurnWhenMissing, estimateChurnFromFeaturesDetailed]"}}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'estimateChurnFromFeaturesDetailed'. Either include it or remove the dependency array.","line":1663,"column":6,"nodeType":"ArrayExpression","endLine":1663,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [computeChurnWhenMissing, customers, estimateChurnFromFeaturesDetailed]","fix":{"range":[93819,93855],"text":"[computeChurnWhenMissing, customers, estimateChurnFromFeaturesDetailed]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import './App.css';\r\n\r\n\r\n\r\nimport React, { useState, useCallback, useMemo, useRef, useEffect } from 'react';\r\nimport auth from './utils/auth';\r\nimport { parseCSV } from './utils/csv';\r\nimport logo from './d2m_logo.png';\r\nimport Toast from './Toast';\r\nimport ChurnChart from './ChurnChart';\r\nimport { computeMonthlySeries as computeMonthlySeriesUtil, holtAutoTune, holtAutoTuneAdvanced } from './utils/analytics';\r\nimport { generateScenarioSummary } from './utils/summarizer';\r\nimport { LineChart, Line, Area, XAxis, YAxis, CartesianGrid, Tooltip as ReTooltip, ResponsiveContainer, Brush, Legend } from 'recharts';\r\nimport { computeForecastFromRecords } from './utils/forecast';\r\n\r\n// --- Utility Functions (Core Logic) ---\r\n\r\n/**\r\n * Calculates a churn risk score (0-100) based on multiple factors.\r\n * @param {object} customer - Customer data object.\r\n * @returns {number} The calculated risk score.\r\n */\r\nconst calculateChurnRiskScore = (customer) => {\r\n  const { MRR, churnProbability, supportTickets, lastActivityDays } = customer;\r\n\r\n  // Weights for different factors (sum should ideally be 1.0)\r\n  const weightProbability = 0.5;\r\n  const weightTickets = 0.2;\r\n  const weightActivity = 0.2;\r\n  const weightMRR = 0.1; \r\n\r\n  // Normalize data and assign risk components\r\n  let probRisk = parseFloat(churnProbability) || 0;\r\n  let ticketRisk = Math.min((parseFloat(supportTickets) || 0) / 10, 1); // 10+ tickets = max risk component\r\n  let activityRisk = Math.min((parseFloat(lastActivityDays) || 0) / 60, 1); // 60+ days of inactivity = max risk component\r\n  // Lower MRR is higher risk (small customers churn more easily)\r\n  let mrrRisk = 1 - Math.min((parseFloat(MRR) || 0) / 2000, 1); \r\n\r\n  const score = (\r\n    (probRisk * weightProbability) +\r\n    (ticketRisk * weightTickets) +\r\n    (activityRisk * weightActivity) +\r\n    (mrrRisk * weightMRR)\r\n  ) * 100;\r\n\r\n  return Math.max(0, Math.min(100, score));\r\n};\r\n\r\n/**\r\n * Formats a number into US dollar currency string.\r\n * @param {number} amount - The numeric amount to format.\r\n * @returns {string} Formatted currency string.\r\n */\r\nconst formatCurrency = (amount) => {\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  }).format(amount);\r\n};\r\n\r\n// (svg-to-png helpers removed) use html2canvas-based exporters below for full-container captures\r\n\r\n// html2canvas helper (loaded dynamically from CDN as a fallback)\r\nlet _html2canvasPromise = null;\r\nconst ensureHtml2Canvas = () => {\r\n  if (_html2canvasPromise) return _html2canvasPromise;\r\n  _html2canvasPromise = (async () => {\r\n    // try dynamic import from local node_modules first\r\n    try {\r\n      const mod = await import('html2canvas');\r\n      return mod.default || mod;\r\n    } catch (e) {\r\n      // fallback to global CDN loader\r\n      if (typeof window.html2canvas !== 'undefined') return window.html2canvas;\r\n      await new Promise((resolve, reject) => {\r\n        const s = document.createElement('script');\r\n        s.src = 'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js';\r\n        s.onload = () => resolve();\r\n        s.onerror = (err) => reject(err);\r\n        document.head.appendChild(s);\r\n      });\r\n      return window.html2canvas;\r\n    }\r\n  })();\r\n  return _html2canvasPromise;\r\n};\r\n\r\n// Export any element (container) to PNG using html2canvas\r\nconst exportElementToPng = async (el, filename = 'chart.png', scale = 2) => {\r\n  if (!el) return false;\r\n  try {\r\n    const html2canvas = await ensureHtml2Canvas();\r\n    const canvas = await html2canvas(el, { scale: Math.max(1, scale), useCORS: true, backgroundColor: getComputedStyle(document.body).backgroundColor || '#fff' });\r\n    return new Promise((resolve) => {\r\n      canvas.toBlob((blob) => {\r\n        if (!blob) return resolve(false);\r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = filename;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.remove();\r\n        resolve(true);\r\n      }, 'image/png');\r\n    });\r\n  } catch (e) {\r\n    console.error('exportElementToPng failed', e);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Copy an element's rasterized PNG to clipboard\r\nconst copyElementToClipboard = async (el, scale = 2) => {\r\n  if (!el || !navigator.clipboard) return false;\r\n  try {\r\n    const html2canvas = await ensureHtml2Canvas();\r\n    const canvas = await html2canvas(el, { scale: Math.max(1, scale), useCORS: true, backgroundColor: getComputedStyle(document.body).backgroundColor || '#fff' });\r\n    const blob = await new Promise((res) => canvas.toBlob(res, 'image/png'));\r\n    if (!blob) return false;\r\n    const clipboardItem = new ClipboardItem({ 'image/png': blob });\r\n    await navigator.clipboard.write([clipboardItem]);\r\n    return true;\r\n  } catch (e) {\r\n    console.error('copyElementToClipboard failed', e);\r\n    return false;\r\n  }\r\n};\r\n\r\n// CustomModal removed in favor of toasts. showCustomModal routes to showToast below.\r\n\r\n  \r\n\r\n// --- View Components ---\r\n\r\n// Component 1: Data Dashboard (The main hub, includes data upload)\r\nconst DataDashboard = ({ onDataUpload, showCustomModal, seedInitialData, showToast = null }) => {\r\n  const [file, setFile] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [uploadedCount, setUploadedCount] = useState(0);\r\n  const [previewHeaders, setPreviewHeaders] = useState([]);\r\n  const [previewRows, setPreviewRows] = useState([]);\r\n  const [showMalformed, setShowMalformed] = useState(false);\r\n  // Persisted header mapping (loads from localStorage if present)\r\n  const HEADER_MAPPING_KEY = 'jarvis_header_mapping_v1';\r\n  const defaultMapping = { dateKey: null, mrrKey: 'MRR', idKey: 'id', churnKey: null, supportKey: null, lastActivityKey: null };\r\n  const [mapping, setMapping] = useState(() => {\r\n    try {\r\n      const raw = localStorage.getItem(HEADER_MAPPING_KEY);\r\n      if (raw) return { ...defaultMapping, ...JSON.parse(raw) };\r\n    } catch (e) { /* ignore */ }\r\n    return defaultMapping;\r\n  });\r\n\r\n  // save mapping to localStorage when it changes\r\n  useEffect(() => {\r\n    try { localStorage.setItem(HEADER_MAPPING_KEY, JSON.stringify(mapping)); } catch (e) { /* ignore */ }\r\n  }, [mapping]);\r\n\r\n  // expected headers kept for reference if needed later\r\n\r\n  // parseCSV moved to ./utils/csv.js\r\n\r\n\r\n  const handleFileUpload = (e) => {\r\n    const uploadedFile = e.target.files[0];\r\n  if (uploadedFile && uploadedFile.name.endsWith('.csv')) {\r\n      setFile(uploadedFile);\r\n      setUploadedCount(0);\r\n      // read header preview\r\n      const reader = new FileReader();\r\n      reader.onload = (ev) => {\r\n        const text = ev.target.result || '';\r\n        const firstLine = text.split('\\n')[0] || '';\r\n        const headers = firstLine.split(',').map(h => h.trim());\r\n        setPreviewHeaders(headers);\r\n        // parse preview rows (first 10) quickly\r\n        try {\r\n          const lines = text.split('\\n').slice(1, 11);\r\n          const previews = lines.map(l => {\r\n            const cols = l.split(',');\r\n            const obj = {};\r\n            headers.forEach((h, idx) => { obj[h] = cols[idx] !== undefined ? cols[idx].trim() : ''; });\r\n            return obj;\r\n          }).filter(r => Object.keys(r).length > 0);\r\n          setPreviewRows(previews);\r\n        } catch (e) { setPreviewRows([]); }\r\n        // set sensible defaults\r\n        setMapping({ dateKey: headers.find(h => /date|month|created_at|uploadedat/i.test(h)) || null, mrrKey: headers.find(h => /mrr|revenue|amount|value/i.test(h)) || 'MRR', idKey: headers.find(h => /id|name|customer/i.test(h)) || 'id' });\r\n      };\r\n      reader.readAsText(uploadedFile);\r\n    } else {\r\n      setFile(null);\r\n      (showToast || showCustomModal)(\"Please upload a valid CSV file.\", 'error');\r\n    }\r\n  };\r\n\r\n  // Detect malformed uploads (missing date or MRR-like columns)\r\n  useEffect(() => {\r\n    try {\r\n      // only evaluate after we have detected headers (i.e., after a file preview)\r\n      if (!previewHeaders || previewHeaders.length === 0) {\r\n        setShowMalformed(false);\r\n        return;\r\n      }\r\n      const dateCandidate = mapping.dateKey || previewHeaders.find(h => /date|month|created_at|uploadedat|start_date|signupDate/i.test(h));\r\n      const mrrCandidate = mapping.mrrKey || previewHeaders.find(h => /mrr|revenue|amount|value/i.test(h));\r\n      setShowMalformed(!(dateCandidate && mrrCandidate));\r\n    } catch (e) { setShowMalformed(false); }\r\n  }, [previewHeaders, mapping]);\r\n\r\n  const handleProcessFile = async () => {\r\n    if (!file) {\r\n      (showToast || showCustomModal)(\"No valid file selected.\", 'error');\r\n      return;\r\n    }\r\n    setUploadedCount(0);\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = async (event) => {\r\n      try {\r\n        const csvText = event.target.result;\r\n        const customerData = parseCSV(csvText, mapping);\r\n\r\n        if (customerData.length === 0) {\r\n          (showToast || showCustomModal)(\"Could not parse any valid data from the CSV. Please check the format.\", 'error');\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        onDataUpload(customerData, mapping);\r\n\r\n        // If authenticated, try to upload to server for persistence\r\n        try {\r\n          const meUser = await auth.me();\r\n          if (meUser && file) {\r\n            const form = new FormData();\r\n            form.append('file', file, file.name);\r\n            const resp = await auth.apiFetch('/api/uploads/', { method: 'POST', body: form });\r\n            if (resp.ok) {\r\n              (showToast || showCustomModal)(`Uploaded ${customerData.length} rows to server.`, 'success');\r\n            } else {\r\n              console.warn('Server upload failed', resp.status);\r\n              (showToast || showCustomModal)(`Local load succeeded; server upload failed (${resp.status}).`, 'warn');\r\n            }\r\n          }\r\n        } catch (e) {\r\n          console.error('Upload to server failed', e);\r\n          (showToast || showCustomModal)('Local load succeeded; server upload error. See console.', 'warn');\r\n        }\r\n\r\n        setUploadedCount(customerData.length);\r\n        (showToast || showCustomModal)(`Successfully loaded ${customerData.length} new customer records into memory!`, 'success');\r\n      } catch (error) {\r\n        console.error(\"Error during file processing:\", error);\r\n        (showToast || showCustomModal)(`Error processing data: ${error.message}`, 'error');\r\n      } finally {\r\n        setLoading(false);\r\n        setFile(null);\r\n        setPreviewRows([]);\r\n      }\r\n    };\r\n\r\n    reader.onerror = (error) => {\r\n      console.error(\"File read error:\", error);\r\n      (showToast || showCustomModal)(\"Failed to read the file.\", 'error');\r\n      setLoading(false);\r\n    };\r\n\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Mapping preview UI helpers\r\n  const HeaderSelector = ({ label, value, onChange }) => (\r\n    <div>\r\n      <label className=\"block text-sm font-medium text-gray-700\">{label}</label>\r\n      <select value={value || ''} onChange={(e) => onChange(e.target.value)} className=\"mt-1 block w-full rounded-lg border-gray-300 shadow-sm p-2 bg-white\">\r\n        <option value=\"\">(none)</option>\r\n        {previewHeaders.map(h => <option key={h} value={h}>{h}</option>)}\r\n      </select>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"p-4 md:p-8\">\r\n      <h2 className=\"text-3xl font-bold text-gray-900 mb-6 border-b pb-2\">Data Intake & Preparation</h2>\r\n\r\n      <div className=\"bg-white p-6 shadow-xl rounded-xl border border-gray-100\">\r\n        <p className=\"text-gray-700 mb-4\">\r\n            Upload a **CSV file** to populate the customer data. Data is stored **only in your browser's memory** and is not persistent.\r\n        </p>\r\n\r\n        <div className=\"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\r\n          <h4 className=\"font-semibold text-blue-800 mb-2\">Required CSV Format (Headers):</h4>\r\n          <p className=\"text-sm text-blue-800 mb-2\">At minimum include a Date column and an MRR (revenue) column. Common header names:</p>\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\r\n            <div>\r\n              <div className=\"text-xs text-blue-700 font-semibold\">Date aliases</div>\r\n              <code className=\"block bg-blue-100 p-2 rounded text-sm text-blue-900 overflow-x-auto\">date, month, created_at, createdAt, uploadedAt, start_date, signupDate</code>\r\n            </div>\r\n            <div>\r\n              <div className=\"text-xs text-blue-700 font-semibold\">MRR / Revenue aliases</div>\r\n              <code className=\"block bg-blue-100 p-2 rounded text-sm text-blue-900 overflow-x-auto\">MRR, revenue, amount, value, price, monthly_revenue</code>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-3 text-sm text-blue-700\">Other helpful columns: <code className=\"bg-blue-100 p-1 rounded\">name</code>, <code className=\"bg-blue-100 p-1 rounded\">churnProbability</code>, <code className=\"bg-blue-100 p-1 rounded\">supportTickets</code></div>\r\n          <div className=\"mt-2 text-xs text-blue-600\">\r\n            Churn formats accepted: decimal probability (e.g., <code className=\"bg-blue-50 p-1 rounded\">0.12</code>) or percent (e.g., <code className=\"bg-blue-50 p-1 rounded\">12%</code>). The parser normalizes percent values to 0–1. Empty churn values will be set to 0 and can be estimated by the Churn Predictor if you enable the heuristic.\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4\">\r\n          <input\r\n            type=\"file\"\r\n            accept=\".csv\"\r\n            onChange={handleFileUpload}\r\n            className=\"flex-1 w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700\"\r\n          />\r\n        </div>\r\n\r\n        {showMalformed && (\r\n          <div className=\"mt-4 p-3 rounded bg-red-50 border border-red-100 text-red-700 text-sm\">\r\n            Warning: uploaded CSV does not appear to contain a recognizable Date, Name and/or MRR column. Please verify your headers or adjust the column selectors below.\r\n          </div>\r\n        )}\r\n        {previewHeaders.length > 0 && (\r\n          <>\r\n            {/* Suggested header picks (moved above preview) */}\r\n            <div className=\"mt-3 p-3 bg-yellow-50 rounded border border-yellow-100 text-sm\">\r\n              {(() => {\r\n                    const suggestedDate = previewHeaders.find(h => /date|month|created_at|createdAt|uploadedAt|start_date|signupDate/i.test(h));\r\n                    const suggestedMrr = previewHeaders.find(h => /mrr|revenue|amount|value|price|monthly_revenue/i.test(h));\r\n                    const suggestedChurn = previewHeaders.find(h => /churn|churnProbability|churn_prob|churn_rate|churn%/i.test(h));\r\n                    const suggestedSupport = previewHeaders.find(h => /support|ticket|tickets|open_tickets|num_tickets/i.test(h));\r\n                    const suggestedLastActivity = previewHeaders.find(h => /lastActivity|last_activity|last_login|days_ago|days_inactive|inactive_days|lastSeen|last_seen/i.test(h));\r\n                    return (\r\n                      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\r\n                        <div className=\"mb-2 sm:mb-0\">\r\n                          <div><strong>Suggested Date:</strong> {suggestedDate || <span className=\"text-gray-500\">(none detected)</span>}</div>\r\n                          <div><strong>Suggested MRR:</strong> {suggestedMrr ? suggestedMrr : <span className=\"text-gray-500\">(none detected)</span>}</div>\r\n                          <div><strong>Suggested Churn:</strong> {suggestedChurn || <span className=\"text-gray-500\">(none detected)</span>}</div>\r\n                          <div><strong>Suggested Support Tickets:</strong> {suggestedSupport || <span className=\"text-gray-500\">(none detected)</span>}</div>\r\n                          <div><strong>Suggested Last Activity:</strong> {suggestedLastActivity || <span className=\"text-gray-500\">(none detected)</span>}</div>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <button className=\"px-3 py-1 bg-green-600 text-white rounded text-sm\" onClick={() => {\r\n                            // accept suggestions into mapping if present\r\n                            setMapping(prev => ({ ...prev, dateKey: suggestedDate || prev.dateKey, mrrKey: suggestedMrr || prev.mrrKey, churnKey: suggestedChurn || prev.churnKey, supportKey: suggestedSupport || prev.supportKey, lastActivityKey: suggestedLastActivity || prev.lastActivityKey }));\r\n                            (showToast || showCustomModal)('Suggested header mapping applied.', 'success');\r\n                          }}>Accept Suggestions</button>\r\n                          <button className=\"px-3 py-1 bg-gray-100 rounded text-sm\" onClick={() => { setMapping({ dateKey: null, mrrKey: 'MRR', idKey: 'id', churnKey: null, supportKey: null, lastActivityKey: null }); (showToast || showCustomModal)('Reset header mapping.', 'info'); }}>Reset</button>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })()}\r\n            </div>\r\n\r\n            <div className=\"mt-4 grid grid-cols-1 sm:grid-cols-4 gap-4\">\r\n              <HeaderSelector label=\"Date Column\" value={mapping.dateKey} onChange={(v) => setMapping(prev => ({ ...prev, dateKey: v }))} />\r\n              <HeaderSelector label=\"MRR Column\" value={mapping.mrrKey} onChange={(v) => setMapping(prev => ({ ...prev, mrrKey: v }))} />\r\n              <HeaderSelector label=\"Churn Column\" value={mapping.churnKey} onChange={(v) => setMapping(prev => ({ ...prev, churnKey: v }))} />\r\n              <HeaderSelector label=\"Support Tickets Column\" value={mapping.supportKey} onChange={(v) => setMapping(prev => ({ ...prev, supportKey: v }))} />\r\n              <HeaderSelector label=\"Last Activity Column\" value={mapping.lastActivityKey} onChange={(v) => setMapping(prev => ({ ...prev, lastActivityKey: v }))} />\r\n              <HeaderSelector label=\"ID / Name Column\" value={mapping.idKey} onChange={(v) => setMapping(prev => ({ ...prev, idKey: v }))} />\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* Preview rows only */}\r\n            <div className=\"mt-6\">\r\n          <div className=\"bg-white p-4 rounded border overflow-x-auto\">\r\n            <h4 className=\"font-semibold text-gray-700 mb-2\">Preview Rows</h4>\r\n            {previewRows.length === 0 ? (\r\n              <div className=\"text-xs text-gray-500\">No preview available.</div>\r\n            ) : (\r\n              <div style={{ minWidth: Math.max(previewHeaders.length * 140, 600) }}>\r\n                <table className=\"w-full text-sm table-auto whitespace-nowrap\">\r\n                  <thead>\r\n                    <tr>\r\n                          {previewHeaders.map(h => {\r\n                            const isMapped = h && (h === mapping.dateKey || h === mapping.mrrKey || h === mapping.churnKey || h === mapping.supportKey || h === mapping.lastActivityKey || h === mapping.idKey);\r\n                            return <th key={h} className={`text-left pr-4 font-medium text-gray-600`}>{h}</th>;\r\n                          })}\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {previewRows.map((r, idx) => (\r\n                          <tr key={idx} className=\"border-t\">\r\n                        {previewHeaders.map(h => <td key={h} className=\"py-1 pr-4\">{r[h]}</td>)}\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"mt-4 flex justify-between items-center\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <button\r\n                onClick={handleProcessFile}\r\n                disabled={!file || loading}\r\n                className=\"px-4 py-2 text-white bg-green-600 hover:bg-green-700 rounded shadow disabled:opacity-60 disabled:cursor-not-allowed\"\r\n              >\r\n                {loading ? 'Processing...' : `Process File ${file ? `(${file.name})` : ''}`}\r\n              </button>\r\n              {uploadedCount > 0 && (\r\n                <p className=\"text-sm font-medium text-green-700\">Loaded {uploadedCount} records.</p>\r\n              )}\r\n            </div>\r\n      <button id=\"load-demo-btn\"\r\n        type=\"button\"\r\n        aria-label=\"Load demo dataset\"\r\n        onClick={async () => {\r\n          setLoading(true);\r\n          try {\r\n            const resp = await fetch('/demo_sample.csv');\r\n            const txt = await resp.text();\r\n            const parsed = parseCSV(txt, { dateKey: 'date', mrrKey: 'MRR', idKey: 'name' });\r\n            if (parsed && parsed.length) {\r\n              onDataUpload(parsed, { dateKey: 'date', mrrKey: 'MRR', idKey: 'name' });\r\n              setUploadedCount(parsed.length);\r\n              (showToast || showCustomModal)(`Loaded demo dataset (${parsed.length} rows)`, 'success');\r\n            } else {\r\n              (showToast || showCustomModal)('Demo data failed to parse.', 'error');\r\n            }\r\n          } catch (e) {\r\n            console.error('Load demo failed', e);\r\n            // Fallback for test environments (jsdom/no network): seed local dummy data instead\r\n            try {\r\n              seedInitialData();\r\n              (showToast || showCustomModal)('Loaded demo dataset (fallback seed).', 'info');\r\n            } catch (se) {\r\n              console.error('Fallback seed failed', se);\r\n              (showToast || showCustomModal)('Failed to load demo data.', 'error');\r\n            }\r\n          } finally { setLoading(false); }\r\n        }}\r\n        className=\"px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition\"\r\n      >\r\n        Load Demo\r\n      </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mt-10 p-6 bg-yellow-50 rounded-xl border border-yellow-200 text-gray-700\">\r\n          <h3 className=\"font-semibold text-lg text-yellow-800 mb-2\">Welcome to the SaaS Analytics Suite!</h3>\r\n          <p>\r\n              Use the tabs above to navigate the different modules: view your **Data Overview**, predict churn in the **Churn Predictor**, or run scenarios in the **What-If Simulation**.\r\n          </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Small AuthPanel to register/login/logout\r\nconst AuthPanel = ({ showToast = null }) => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [orgName, setOrgName] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [meUser, setMeUser] = useState(null);\r\n\r\n  const refreshMe = useCallback(async () => {\r\n    const u = await auth.me();\r\n    setMeUser(u ? u.username : null);\r\n  }, []);\r\n\r\n  useEffect(() => { refreshMe(); }, [refreshMe]);\r\n\r\n  const doRegister = async () => {\r\n    setLoading(true); setError(null);\r\n    try {\r\n      await auth.register({ username, password, org_name: orgName || username, set_cookie: true });\r\n      (showToast || (()=>{}))('Registration successful — logged in (cookie set).', 'success');\r\n      setUsername(''); setPassword(''); setOrgName('');\r\n      await refreshMe();\r\n    } catch (e) {\r\n      console.error('Register failed', e);\r\n      setError('Registration failed.');\r\n    } finally { setLoading(false); }\r\n  };\r\n\r\n  const doLogin = async () => {\r\n    setLoading(true); setError(null);\r\n    try {\r\n      await auth.login({ username, password, use_cookie: true });\r\n      (showToast || (()=>{}))('Login successful.', 'success');\r\n      setUsername(''); setPassword('');\r\n      await refreshMe();\r\n    } catch (e) {\r\n      console.error('Login failed', e);\r\n      setError('Login failed. Check credentials.');\r\n    } finally { setLoading(false); }\r\n  };\r\n\r\n  const doLogout = async () => {\r\n    await auth.logout();\r\n    (showToast || (()=>{}))('Logged out.', 'info');\r\n    setMeUser(null);\r\n  };\r\n\r\n  if (meUser) {\r\n    return (\r\n      <div className=\"flex items-center space-x-2\">\r\n        <div className=\"text-xs text-gray-600\">{meUser ? `Signed in as ${meUser}` : `Signed in`}</div>\r\n        <button className=\"px-3 py-1 text-xs bg-red-100 text-red-700 rounded\" onClick={doLogout}>Logout</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex items-center space-x-2\">\r\n      <input placeholder=\"org (for register)\" value={orgName} onChange={(e) => setOrgName(e.target.value)} className=\"text-xs p-1 rounded border\" />\r\n      <input placeholder=\"username\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"text-xs p-1 rounded border\" />\r\n      <input placeholder=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} type=\"password\" className=\"text-xs p-1 rounded border\" />\r\n      <button className=\"px-3 py-1 bg-green-600 text-white rounded text-xs\" disabled={loading} onClick={doLogin}>Login</button>\r\n      <button className=\"px-3 py-1 bg-blue-600 text-white rounded text-xs\" disabled={loading} onClick={doRegister}>Register</button>\r\n      {error && <div className=\"text-xs text-red-600\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Use computeMonthlySeries from utilities\r\nconst computeMonthlySeries = computeMonthlySeriesUtil;\r\n\r\n\r\n// Component 2: Data Overview\r\nconst DataOverview = ({ overviewData }) => {\r\n    const StatCard = ({ title, value, description }) => (\r\n        <div className=\"bg-white p-5 rounded-xl shadow-md border border-gray-200\">\r\n          <p className=\"text-sm font-medium text-gray-500 truncate\">{title}</p>\r\n          <p className=\"mt-1 text-3xl font-extrabold text-gray-900\">{value}</p>\r\n          <p className=\"mt-2 text-xs text-gray-500\">{description}</p>\r\n        </div>\r\n      );\r\n\r\n    return (\r\n      <div className=\"p-4 md:p-8\">\r\n  <h2 className=\"text-3xl font-bold text-gray-900 mb-6 border-b pb-2\">Overview — Key Metrics</h2>\r\n  \r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          <StatCard title=\"Total Customers\" value={overviewData?.customerCount || 'N/A'} description=\"Current customer count loaded.\" />\r\n          <StatCard title=\"Total Monthly Revenue\" value={formatCurrency(overviewData?.totalMRR || 0)} description=\"Sum of all customers' MRR.\" />\r\n          <StatCard title=\"Average MRR\" value={formatCurrency(overviewData?.avgMrr || 0)} description=\"Monthly Recurring Revenue per customer.\" />\r\n          <StatCard title=\"Est. Annual Revenue\" value={formatCurrency(overviewData?.totalRevenue || 0)} description=\"Total MRR multiplied by 12.\" />\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6 mt-6\">\r\n          <StatCard title=\"Churned MRR (est)\" value={formatCurrency(overviewData?.churnedMRR || 0)} description=\"Heuristic of at-risk monthly MRR.\" />\r\n          <StatCard title=\"Estimated NRR\" value={`${Math.round((overviewData?.estimatedNRR || 1) * 100)}%`} description=\"Net Revenue Retention (approx).\" />\r\n          <StatCard title=\"Churn % (by count)\" value={`${Math.round((overviewData?.churnRateByCount || 0) * 100)}%`} description=\"Percent of customers flagged as at-risk.\" />\r\n        </div>\r\n        <div className=\"mt-8 p-6 bg-white shadow-xl rounded-xl border border-gray-100\">\r\n          <h3 className=\"text-xl font-bold text-gray-800 mb-4\">Core Metrics Chart</h3>\r\n          <p className=\"text-gray-600\">New vs Expansion vs Churn (monthly) — simple stacked view.</p>\r\n          {overviewData?.monthlySeries && overviewData.monthlySeries.length > 0 ? (\r\n            <ChurnChart data={overviewData.monthlySeries} />\r\n          ) : (\r\n            <div className=\"h-48 bg-gray-50 border border-dashed border-gray-300 rounded-lg mt-4 flex items-center justify-center text-gray-400\">\r\n              [Chart Placeholder: Visualizing Loaded Customer Data Distributions]\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\n// Component 3: Time-Series Forecast (Recharts-based)\r\nconst TimeSeriesForecast = ({ chartRef, monthlySeries = [], records = [], showCustomModal = () => {}, showToast = null, showToastRef = { current: null }, showCustomModalRef = { current: null } }) => {\r\n  const [monthsOut, setMonthsOut] = useState(12);\r\n  const [method, setMethod] = useState('linear'); // 'linear' or 'holt'\r\n  // Holt smoothing parameters (persisted in localStorage)\r\n  const HOLTPREF = 'jarvis_holt_prefs_v1';\r\n  const storedHolt = (() => { try { return JSON.parse(localStorage.getItem(HOLTPREF) || '{}'); } catch (e) { return {}; } })();\r\n  const [holtAlpha, setHoltAlpha] = useState(storedHolt.alpha || 0.6);\r\n  const [holtBeta, setHoltBeta] = useState(storedHolt.beta || 0.2);\r\n  const [holtBootstrap, setHoltBootstrap] = useState(storedHolt.bootstrap || false);\r\n  const [holtBootstrapSamples, setHoltBootstrapSamples] = useState(storedHolt.bootstrapSamples || 200);\r\n  const [holtBootstrapAsync, setHoltBootstrapAsync] = useState(storedHolt.bootstrapAsync || false);\r\n  const [tuning, setTuning] = useState(false);\r\n\r\n  // Prepare numeric series from monthlySeries: [{period: 'YYYY-MM', total}]\r\n  const series = useMemo(() => {\r\n    if (!monthlySeries || !Array.isArray(monthlySeries) || monthlySeries.length === 0) return [];\r\n    // Ensure sorted by period\r\n    const parsed = monthlySeries.map((m) => ({ period: m.period, total: Number(m.total || 0) }));\r\n    parsed.sort((a, b) => a.period.localeCompare(b.period));\r\n    return parsed;\r\n  }, [monthlySeries]);\r\n\r\n  // forecastResult is computed via an async-aware flow below (forecastResultState)\r\n\r\n  const [forecastResultState, setForecastResultState] = useState(null);\r\n\r\n  const combined = useMemo(() => {\r\n    if (!series) return [];\r\n    const actual = series.map(s => ({ period: s.period, actual: s.total }));\r\n    const fc = (forecastResultState || {}).forecast || [];\r\n    // merge by period to single objects Recharts likes\r\n    const map = {};\r\n    actual.forEach(a => { map[a.period] = map[a.period] || {}; map[a.period].period = a.period; map[a.period].actual = a.actual; });\r\n    fc.forEach(f => { map[f.period] = map[f.period] || {}; map[f.period].period = f.period; map[f.period].predicted = f.predicted; map[f.period].lower = f.lower; map[f.period].upper = f.upper; });\r\n    return Object.keys(map).sort().map(k => map[k]);\r\n  }, [series, forecastResultState]);\r\n\r\n  const downloadCSV = () => {\r\n    const rows = [];\r\n    // header\r\n    rows.push(['period','actual','predicted','lower','upper'].join(','));\r\n    // merge actuals and forecasts by period\r\n    const map = {};\r\n    series.forEach(s => { map[s.period] = map[s.period] || {}; map[s.period].actual = s.total; });\r\n  (forecastResultState?.forecast || []).forEach(f => { map[f.period] = map[f.period] || {}; map[f.period].predicted = f.predicted; map[f.period].lower = f.lower; map[f.period].upper = f.upper; });\r\n    const periods = Object.keys(map).sort();\r\n    periods.forEach(p => {\r\n      const row = map[p] || {};\r\n      rows.push([\r\n        p,\r\n        (row.actual !== undefined ? row.actual : ''),\r\n        (row.predicted !== undefined ? row.predicted : ''),\r\n        (row.lower !== undefined ? row.lower : ''),\r\n        (row.upper !== undefined ? row.upper : ''),\r\n      ].join(','));\r\n    });\r\n\r\n    const csvContent = rows.join('\\n');\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', 'forecast.csv');\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const [exporting, setExporting] = useState(false);\r\n  const [computingBootstrap, setComputingBootstrap] = useState(false);\r\n  const asyncForecastRef = useRef(null); // holds latest async forecast promise (with revoke)\r\n  const prevForecastInputKeyRef = useRef(null);\r\n  // Dev diagnostic flag: set localStorage.setItem('JARVIS_DEV_DIAG','1') to enable lightweight logs\r\n  const devDiag = typeof window !== 'undefined' && !!localStorage.getItem('JARVIS_DEV_DIAG');\r\n  // const bootstrapWorkerRef = useRef(null); // reserved for cancellation if needed\r\n  // Linear regression on index -> value (sync + async bootstrap support)\r\n\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n\r\n    // Build a compact, stable input key using a streaming FNV-1a hash so we avoid\r\n    // allocating a giant string for large datasets. We update the hash with\r\n    // small chunks (settings and each row) to produce a deterministic key.\r\n    const fnv1aInit = () => 2166136261 >>> 0;\r\n    const fnv1aUpdate = (h, str) => {\r\n      for (let i = 0; i < str.length; i++) {\r\n        h ^= str.charCodeAt(i);\r\n        h = Math.imul(h, 16777619) >>> 0;\r\n      }\r\n      return h;\r\n    };\r\n    const fnv1aDigest = (h) => (h >>> 0).toString(16);\r\n\r\n    let h = fnv1aInit();\r\n    // Add the config/settings\r\n    h = fnv1aUpdate(h, String(method));\r\n    h = fnv1aUpdate(h, '|');\r\n    h = fnv1aUpdate(h, String(monthsOut));\r\n    h = fnv1aUpdate(h, '|');\r\n    h = fnv1aUpdate(h, String(holtAlpha));\r\n    h = fnv1aUpdate(h, '|');\r\n    h = fnv1aUpdate(h, String(holtBeta));\r\n    h = fnv1aUpdate(h, '|');\r\n    h = fnv1aUpdate(h, holtBootstrap ? 'b' : 'n');\r\n    h = fnv1aUpdate(h, '|');\r\n    h = fnv1aUpdate(h, String(holtBootstrapSamples));\r\n    h = fnv1aUpdate(h, '|');\r\n    h = fnv1aUpdate(h, holtBootstrapAsync ? 'a' : 's');\r\n    h = fnv1aUpdate(h, '|');\r\n\r\n    // Stream the row data from monthlySeries (preferred) or fallback to records\r\n    if (monthlySeries && monthlySeries.length) {\r\n      h = fnv1aUpdate(h, String(monthlySeries.length));\r\n      for (let i = 0; i < monthlySeries.length; i++) {\r\n        const ms = monthlySeries[i];\r\n        // include period and numeric total as small updates\r\n        h = fnv1aUpdate(h, '|');\r\n        h = fnv1aUpdate(h, String(ms.period));\r\n        h = fnv1aUpdate(h, ':');\r\n        h = fnv1aUpdate(h, String(ms.total));\r\n      }\r\n    } else if (records && records.length) {\r\n      h = fnv1aUpdate(h, String(records.length));\r\n      for (let i = 0; i < records.length; i++) {\r\n        const r = records[i];\r\n        const period = r.period || r.date || '';\r\n        const val = r.total || r.MRR || '';\r\n        h = fnv1aUpdate(h, '|');\r\n        h = fnv1aUpdate(h, String(period));\r\n        h = fnv1aUpdate(h, ':');\r\n        h = fnv1aUpdate(h, String(val));\r\n      }\r\n    } else {\r\n      h = fnv1aUpdate(h, '0');\r\n    }\r\n\r\n    const inputKey = fnv1aDigest(h);\r\n\r\n    // If inputs haven't changed, skip recomputing\r\n    if (prevForecastInputKeyRef.current === inputKey) {\r\n      if (devDiag) console.debug('[jarvis] forecast effect skipped (inputKey unchanged)', inputKey);\r\n      return () => { cancelled = true; };\r\n    }\r\n    prevForecastInputKeyRef.current = inputKey;\r\n\r\n    if (devDiag) console.debug('[jarvis] forecast effect running, inputKey=', inputKey, { method, monthsOut, holtAlpha, holtBeta, holtBootstrap, holtBootstrapSamples, holtBootstrapAsync });\r\n\r\n    setComputingBootstrap(true);\r\n\r\n    // Use computeForecastFromRecords helper — it will aggregate monthly series and run forecast\r\n    try {\r\n      const maybe = computeForecastFromRecords(records && records.length ? records : (monthlySeries && monthlySeries.length ? monthlySeries.map(ms => ({ period: ms.period, total: ms.total })) : []), { method: method === 'holt' ? 'holt' : 'linear', monthsOut, holtOptions: { alpha: holtAlpha, beta: holtBeta, bootstrap: holtBootstrap, bootstrapSamples: holtBootstrapSamples, bootstrapAsync: holtBootstrapAsync } });\r\n      // The helper may return a Promise (if holt with async bootstrap), or an object\r\n      if (maybe && typeof maybe.then === 'function') {\r\n        asyncForecastRef.current = maybe;\r\n        maybe.then((res) => {\r\n          asyncForecastRef.current = null;\r\n          if (cancelled) return;\r\n          // res is the full object { monthlySeries, forecastResult }\r\n          setForecastResultState(res.forecastResult || res);\r\n        }).catch((err) => {\r\n          asyncForecastRef.current = null;\r\n          console.error('Async forecast failed', err);\r\n          // use refs to stable toast functions\r\n          try { (showToastRef.current || showCustomModalRef.current)('Async forecast failed. See console for details.', 'error'); } catch (e) {}\r\n        }).finally(() => { if (!cancelled) setComputingBootstrap(false); });\r\n      } else {\r\n        // synchronous result\r\n        const res = maybe || {};\r\n        setForecastResultState(res.forecastResult || res);\r\n        setComputingBootstrap(false);\r\n      }\r\n    } catch (err) {\r\n      console.error('Forecast compute failed', err);\r\n      try { (showToastRef.current || showCustomModalRef.current)('Forecast compute failed. See console for details.', 'error'); } catch (e) {}\r\n      setComputingBootstrap(false);\r\n    }\r\n\r\n    return () => { cancelled = true; };\r\n  // note: showToast/showCustomModal use refs above so they are omitted from deps to avoid identity churn\r\n  }, [records, monthlySeries, method, monthsOut, holtAlpha, holtBeta, holtBootstrap, holtBootstrapSamples, holtBootstrapAsync]);\r\n\r\n  // Render the forecast chart UI\r\n  return (\r\n    <div className=\"p-4 md:p-8\">\r\n  <h2 className=\"text-3xl font-bold text-gray-900 mb-6 border-b pb-2\">Forecasting & Trend Analysis</h2>\r\n      <div className=\"p-6 bg-white rounded-xl shadow-xl border border-gray-200\">\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <p className=\"text-gray-600\">Showing historical Actual monthly MRR and a simple linear projection with a 95% CI band.</p>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <label className=\"text-sm text-gray-600\">Months to forecast:</label>\r\n            <input aria-label=\"Months to forecast\" type=\"number\" min=\"1\" max=\"36\" value={monthsOut} onChange={(e) => setMonthsOut(Number(e.target.value || 1))} className=\"w-20 p-1 rounded border\" />\r\n            <label className=\"text-sm text-gray-600\">Method:</label>\r\n            <select aria-label=\"Forecast method\" value={method} onChange={(e) => setMethod(e.target.value)} className=\"p-1 rounded border bg-white\">\r\n              <option value=\"linear\">Linear OLS</option>\r\n              <option value=\"holt\">Holt Linear</option>\r\n            </select>\r\n            {/* If Holt is selected, show alpha/beta controls */}\r\n            {method === 'holt' && (\r\n              <div className=\"flex items-center space-x-2\">\r\n                <label className=\"text-sm text-gray-600\">α</label>\r\n                <input type=\"range\" min=\"0.01\" max=\"1\" step=\"0.01\" value={holtAlpha} onChange={(e) => { const v = Number(e.target.value); setHoltAlpha(v); localStorage.setItem(HOLTPREF, JSON.stringify({ alpha: v, beta: holtBeta })); }} />\r\n                <label className=\"text-sm text-gray-600\">β</label>\r\n                <input type=\"range\" min=\"0.01\" max=\"1\" step=\"0.01\" value={holtBeta} onChange={(e) => { const v = Number(e.target.value); setHoltBeta(v); localStorage.setItem(HOLTPREF, JSON.stringify({ alpha: holtAlpha, beta: v })); }} />\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <button type=\"button\" disabled={tuning} className=\"px-3 py-1 bg-indigo-600 text-white rounded text-sm\" onClick={async () => {\r\n                    try {\r\n                      if (!series || series.length < 3) { (showToast || showCustomModal)('Not enough data to auto-tune (min 3 months).', 'warn'); return; }\r\n                      (showToast || showCustomModal)('Running Holt auto-tune (fast search)...', 'info');\r\n                      setTuning(true);\r\n                      // run tuner (synchronous but quick)\r\n                      const res = holtAutoTune(series, { alpha: holtAlpha, beta: holtBeta });\r\n                      setHoltAlpha(res.alpha);\r\n                      setHoltBeta(res.beta);\r\n                      localStorage.setItem(HOLTPREF, JSON.stringify({ alpha: res.alpha, beta: res.beta, bootstrap: holtBootstrap, bootstrapSamples: holtBootstrapSamples, bootstrapAsync: holtBootstrapAsync }));\r\n                      (showToast || showCustomModal)(`Auto-tune completed — α=${res.alpha.toFixed(2)}, β=${res.beta.toFixed(2)}, MSE=${res.mse.toFixed(1)}`, 'success');\r\n                    } catch (err) {\r\n                      console.error('Auto-tune failed', err);\r\n                      (showToast || showCustomModal)('Auto-tune failed. See console for details.', 'error');\r\n                    } finally { setTuning(false); }\r\n                  }}>Auto-tune</button>\r\n\r\n                  <button type=\"button\" disabled={tuning} className=\"px-3 py-1 bg-violet-600 text-white rounded text-sm\" onClick={async () => {\r\n                    try {\r\n                      if (!series || series.length < 3) { (showToast || showCustomModal)('Not enough data to auto-tune (min 3 months).', 'warn'); return; }\r\n                      (showToast || showCustomModal)('Running Advanced Auto-tune (Nelder-Mead)...', 'info');\r\n                      setTuning(true);\r\n                      const res = await new Promise((resovle) => {\r\n                        // run advanced tuner (may take longer)\r\n                        const out = holtAutoTuneAdvanced(series, { alpha: holtAlpha, beta: holtBeta, maxIter: 300 });\r\n                        resovle(out);\r\n                      });\r\n                      setHoltAlpha(res.alpha);\r\n                      setHoltBeta(res.beta);\r\n                      localStorage.setItem(HOLTPREF, JSON.stringify({ alpha: res.alpha, beta: res.beta, bootstrap: holtBootstrap, bootstrapSamples: holtBootstrapSamples, bootstrapAsync: holtBootstrapAsync }));\r\n                      (showToast || showCustomModal)(`Advanced Auto-tune completed — α=${res.alpha.toFixed(3)}, β=${res.beta.toFixed(3)}, MSE=${res.mse.toFixed(2)}`, 'success');\r\n                    } catch (err) {\r\n                      console.error('Advanced Auto-tune failed', err);\r\n                      (showToast || showCustomModal)('Advanced Auto-tune failed. See console for details.', 'error');\r\n                    } finally { setTuning(false); }\r\n                  }}>Auto-tune (advanced)</button>\r\n                </div>\r\n                <label className=\"text-sm text-gray-600\">Bootstrap CI</label>\r\n                <input type=\"checkbox\" checked={holtBootstrap} onChange={(e) => { const v = !!e.target.checked; setHoltBootstrap(v); localStorage.setItem(HOLTPREF, JSON.stringify({ alpha: holtAlpha, beta: holtBeta, bootstrap: v, bootstrapSamples: holtBootstrapSamples, bootstrapAsync: holtBootstrapAsync })); }} />\r\n                <label className=\"text-sm text-gray-600\">Async Bootstrap</label>\r\n                <input type=\"checkbox\" checked={holtBootstrapAsync} onChange={(e) => { const v = !!e.target.checked; setHoltBootstrapAsync(v); localStorage.setItem(HOLTPREF, JSON.stringify({ alpha: holtAlpha, beta: holtBeta, bootstrap: holtBootstrap, bootstrapSamples: holtBootstrapSamples, bootstrapAsync: v })); }} />\r\n                {holtBootstrap && (\r\n                  <div className=\"flex items-center space-x-1\">\r\n                    <label className=\"text-sm text-gray-600\">Samples</label>\r\n                    <input type=\"number\" min=\"50\" max=\"2000\" step=\"10\" value={holtBootstrapSamples} onChange={(e) => { const v = Math.max(50, Number(e.target.value || 200)); setHoltBootstrapSamples(v); localStorage.setItem(HOLTPREF, JSON.stringify({ alpha: holtAlpha, beta: holtBeta, bootstrap: holtBootstrap, bootstrapSamples: v })); }} className=\"w-20 p-1 rounded border\" />\r\n                    {computingBootstrap && (\r\n                      <span className=\"text-sm text-gray-500 ml-2\">Computing CI...</span>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n            <button type=\"button\" aria-label=\"Download forecast CSV\" className=\"px-3 py-1 bg-green-500 text-white rounded text-sm\" onClick={downloadCSV}>Download CSV</button>\r\n            <button type=\"button\" aria-label=\"Download forecast image\" disabled={exporting || !(chartRef && chartRef.current)} aria-disabled={exporting || !(chartRef && chartRef.current)} className=\"px-3 py-1 bg-blue-500 text-white rounded text-sm\" onClick={async () => {\r\n              const container = chartRef && chartRef.current ? chartRef.current : null;\r\n              if (!container) { (showToast || showCustomModal)('No chart available to export.', 'error'); return; }\r\n              setExporting(true);\r\n              try {\r\n                const ok = await exportElementToPng(container, 'forecast_chart.png', 2);\r\n                if (ok) (showToast || showCustomModal)('Chart image downloaded.', 'success'); else (showToast || showCustomModal)('Failed to export chart image.', 'error');\r\n              } finally { setExporting(false); }\r\n            }}>{exporting ? 'Exporting...' : 'Download Image'}</button>\r\n            <button type=\"button\" aria-label=\"Copy forecast image to clipboard\" disabled={exporting || !(chartRef && chartRef.current)} aria-disabled={exporting || !(chartRef && chartRef.current)} className=\"px-3 py-1 bg-gray-500 text-white rounded text-sm\" onClick={async () => {\r\n              const container = chartRef && chartRef.current ? chartRef.current : null;\r\n              if (!container) { (showToast || showCustomModal)('No chart available to copy.', 'error'); return; }\r\n              setExporting(true);\r\n              try {\r\n                const ok = await copyElementToClipboard(container, 2);\r\n                if (ok) (showToast || showCustomModal)('Chart image copied to clipboard.', 'success'); else (showToast || showCustomModal)('Failed to copy chart to clipboard. Your browser may block clipboard image writes.', 'error');\r\n              } finally { setExporting(false); }\r\n            }}>{exporting ? 'Exporting...' : 'Copy Image'}</button>\r\n            {computingBootstrap && (\r\n              <div className=\"flex items-center space-x-2\">\r\n                <div className=\"text-sm text-gray-500\">Computing CI...</div>\r\n                <button type=\"button\" aria-label=\"Cancel CI\" className=\"px-3 py-1 bg-red-500 text-white rounded text-sm\" onClick={() => {\r\n                  try {\r\n                    if (asyncForecastRef.current && typeof asyncForecastRef.current.revoke === 'function') asyncForecastRef.current.revoke();\r\n                  } catch (e) { console.error('Cancel revoke failed', e); }\r\n                  asyncForecastRef.current = null;\r\n                  setComputingBootstrap(false);\r\n                  // keep last known forecast displayed — avoid calling setState with same value\r\n                  (showToast || showCustomModal)('Bootstrap CI cancelled.', 'info');\r\n                }}>Cancel CI</button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div ref={chartRef} className=\"mt-4 h-64\">\r\n          {combined.length === 0 ? (\r\n            <div className=\"h-56 bg-gray-50 border border-dashed border-gray-300 rounded-lg flex items-center justify-center text-gray-400\">No monthly series data — load a dataset with a date and MRR column in the Data Dashboard.</div>\r\n          ) : (\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <LineChart data={combined} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"period\" />\r\n                <YAxis />\r\n                <ReTooltip formatter={(value) => typeof value === 'number' ? formatCurrency(value) : value} />\r\n                <Legend />\r\n                <Area type=\"monotone\" dataKey=\"upper\" stroke=\"none\" fill=\"#BFDBFE\" fillOpacity={0.4} isAnimationActive={false} />\r\n                <Area type=\"monotone\" dataKey=\"lower\" stroke=\"none\" fill=\"#BFDBFE\" fillOpacity={0.4} isAnimationActive={false} />\r\n                <Line type=\"monotone\" dataKey=\"actual\" stroke=\"#10B981\" strokeWidth={2} dot={{ r: 3 }} />\r\n                <Line type=\"monotone\" dataKey=\"predicted\" stroke=\"#1D4ED8\" strokeWidth={2} dot={{ r: 3 }} strokeDasharray=\"6 4\" />\r\n                <Brush dataKey=\"period\" height={30} stroke=\"#8884d8\" />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          )}\r\n        </div>\r\n        {/* Explainability panel: shows chosen model and parameters in friendly text */}\r\n        <div className=\"mt-4 p-3 bg-gray-50 border border-dashed rounded text-sm text-gray-700\">\r\n          <div className=\"flex items-start justify-between\">\r\n            <div>\r\n              <strong>Model:</strong> {method === 'holt' ? 'Holt Linear (double exponential smoothing)' : 'Linear regression (OLS)'}\r\n              <div className=\"text-xs text-gray-600 mt-1\">{method === 'holt' ? `α=${holtAlpha.toFixed(2)}, β=${holtBeta.toFixed(2)}${holtBootstrap ? `, bootstrap=${holtBootstrapSamples} samples${holtBootstrapAsync ? ' (async)' : ''}` : ''}` : `Slope projection over historical period`}</div>\r\n            </div>\r\n            <div className=\"text-right text-xs text-gray-500\">\r\n              <div>{series.length} months of history</div>\r\n              <div>{monthsOut} months forecast</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-2 text-xs text-gray-500\">Tip: use Auto-tune for Holt when you have at least 6 months of history. Bootstrap CIs estimate uncertainty — enable async mode for large sample counts.</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Component 4: What-If Simulation\r\nconst WhatIfSimulation = ({ enhancedCustomers, showCustomModal, chartRef, showToast = null }) => {\r\n    const [whatIfData, setWhatIfData] = useState({\r\n        discountEffect: 0.1, // Expected churn rate reduction from discount\r\n        supportEffect: 0.05, // Expected churn rate reduction from proactive support\r\n        campaignEffect: 0.15, // Expected churn rate reduction from re-engagement campaign\r\n        selectedRiskLevel: 'High',\r\n      });\r\n\r\n      // Scenario persistence (localStorage)\r\n      const STORAGE_KEY = 'jarvis_saved_scenarios_v1';\r\n      const [savedScenarios, setSavedScenarios] = useState([]);\r\n      const [scenarioName, setScenarioName] = useState('');\r\n      const [selectedScenarioId, setSelectedScenarioId] = useState(null);\r\n\r\n      // On mount, load any previously saved scenarios from localStorage\r\n      useEffect(() => {\r\n        try {\r\n          const raw = localStorage.getItem(STORAGE_KEY);\r\n          if (raw) setSavedScenarios(JSON.parse(raw));\r\n        } catch (e) {\r\n          // ignore parse errors\r\n        }\r\n        // Also attempt to fetch server-saved dashboards and merge when authenticated\r\n        (async () => {\r\n          try {\r\n            const meUser = await auth.me();\r\n            if (!meUser) return;\r\n            const resp = await auth.apiFetch('/api/dashboards/', { method: 'GET' });\r\n            if (!resp || !resp.ok) return;\r\n            const list = await resp.json().catch(() => null);\r\n            if (!Array.isArray(list)) return;\r\n            // Map server dashboards into local scenario shape if possible\r\n            const mapped = list.map(d => ({ id: `srv-${d.id}`, serverId: d.id, name: d.name || `Server Dashboard ${d.id}`, createdAt: d.created_at || d.createdAt || new Date().toISOString(), data: (d.config && d.config.data) || {} }));\r\n            // Merge server-saved dashboards before local ones (server-first)\r\n            setSavedScenarios(prev => {\r\n              // dedupe by serverId or id\r\n              const seen = new Set();\r\n              const combined = (mapped.concat(prev || [])).filter(s => {\r\n                const key = s.serverId ? `srv-${s.serverId}` : s.id;\r\n                if (seen.has(key)) return false; seen.add(key); return true;\r\n              }).slice(0,50);\r\n              try { localStorage.setItem(STORAGE_KEY, JSON.stringify(combined)); } catch (e) {}\r\n              return combined;\r\n            });\r\n          } catch (e) {\r\n            // ignore fetch errors (e.g., not authenticated or offline)\r\n          }\r\n        })();\r\n      }, []);\r\n\r\n      const persistScenarios = (list) => {\r\n        try { localStorage.setItem(STORAGE_KEY, JSON.stringify(list)); } catch (e) { /* ignore */ }\r\n      };\r\n\r\n      const saveScenario = () => {\r\n        const name = scenarioName && scenarioName.trim() ? scenarioName.trim() : `Scenario ${new Date().toLocaleString()}`;\r\n        const id = Date.now().toString();\r\n        const payload = { id, name, createdAt: new Date().toISOString(), data: whatIfData };\r\n        const next = [payload].concat(savedScenarios).slice(0, 50); // keep recent 50\r\n        // if authenticated, persist to server as a Dashboard\r\n        (async () => {\r\n          try {\r\n            const meUser = await auth.me();\r\n            if (meUser) {\r\n              const payloadToServer = { name, config: { data: whatIfData } };\r\n              try {\r\n                const resp = await auth.apiFetch('/api/dashboards/', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payloadToServer) });\r\n                if (resp.ok) {\r\n                  const body = await resp.json().catch(() => null);\r\n                  if (body && body.id) {\r\n                    const merged = [{ ...payloadToServer, serverId: body.id, id }].concat(savedScenarios).slice(0,50);\r\n                    setSavedScenarios(merged);\r\n                    persistScenarios(merged);\r\n                  }\r\n                  (showToast || showCustomModal)(`Saved scenario \"${name}\" to server.`, 'success');\r\n                  return;\r\n                }\r\n                console.warn('Server save failed', resp.status);\r\n              } catch (e) {\r\n                console.error('Server save error', e);\r\n              }\r\n            }\r\n            // fallback local\r\n            setSavedScenarios(next);\r\n            persistScenarios(next);\r\n            (showToast || showCustomModal)(`Saved scenario \"${name}\"`, 'success');\r\n          } catch (e) {\r\n            console.error('Save scenario failed', e);\r\n            setSavedScenarios(next);\r\n            persistScenarios(next);\r\n            (showToast || showCustomModal)(`Saved scenario \"${name}\"`, 'success');\r\n          }\r\n        })();\r\n\r\n        setScenarioName('');\r\n        setSelectedScenarioId(id);\r\n      };\r\n\r\n      // Autosave current draft to localStorage on every change so users can restore later\r\n      useEffect(() => {\r\n        try {\r\n          const draftKey = 'jarvis_autosave_whatif_v1';\r\n          localStorage.setItem(draftKey, JSON.stringify(whatIfData));\r\n        } catch (e) { /* ignore write errors (storage full) */ }\r\n      }, [whatIfData]);\r\n\r\n      // Export current target customers for the selected risk level as CSV\r\n      const exportScenarioCsv = () => {\r\n        const headers = ['id','name','MRR','riskScore','riskLevel','supportTickets','lastActivityDays'];\r\n        const rows = [headers.join(',')];\r\n        const { selectedRiskLevel } = whatIfData;\r\n        const target = enhancedCustomers.filter(c => selectedRiskLevel === 'All' || c.riskLevel === selectedRiskLevel);\r\n        target.forEach(c => {\r\n          rows.push([c.id, c.name || '', c.MRR || 0, c.riskScore || 0, c.riskLevel || '', c.supportTickets || 0, c.lastActivityDays || 0].map(v => `\"${String(v).replace(/\"/g,'\"\"')}\"`).join(','));\r\n        });\r\n        const blob = new Blob([rows.join('\\n')], { type: 'text/csv' });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url; a.download = 'scenario_customers.csv'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);\r\n        (showToast || showCustomModal)(`Exported ${target.length} customer rows.`, 'success');\r\n      };\r\n\r\n      // Generate a short local summary string for the current scenario\r\n      const [scenarioSummary, setScenarioSummary] = useState('');\r\n      const generateSummary = () => {\r\n        const s = generateScenarioSummary(simulationResults, whatIfData);\r\n        setScenarioSummary(s);\r\n      };\r\n\r\n      const loadScenario = (s) => {\r\n        if (!s || !s.data) return;\r\n        setWhatIfData(s.data);\r\n        setSelectedScenarioId(s.id);\r\n        (showToast || showCustomModal)(`Loaded scenario \"${s.name}\"`, 'info');\r\n      };\r\n\r\n      const deleteScenario = (id) => {\r\n        const next = savedScenarios.filter(s => s.id !== id);\r\n        setSavedScenarios(next);\r\n        persistScenarios(next);\r\n        if (selectedScenarioId === id) setSelectedScenarioId(null);\r\n      };\r\n\r\n      // Simulation Logic (Memoized calculation for performance)\r\n      const simulationResults = useMemo(() => {\r\n        const { discountEffect, supportEffect, campaignEffect, selectedRiskLevel } = whatIfData;\r\n    \r\n        if (enhancedCustomers.length === 0) {\r\n            return { currentTotalMRR: 0, potentialMRRLoss: 0, simulatedMRRLoss: 0, projectedMRRSaved: 0, targetCustomerCount: 0 };\r\n        }\r\n\r\n        // Filter customers based on the simulation target risk level\r\n        const targetCustomers = enhancedCustomers.filter(c => \r\n            selectedRiskLevel === 'All' || c.riskLevel === selectedRiskLevel\r\n        );\r\n    \r\n        const currentTotalMRR = enhancedCustomers.reduce((sum, c) => sum + (c.MRR || 0), 0);\r\n    \r\n        // 1. Baseline calculation (What we expect to lose without intervention among target customers)\r\n        const potentialMRRLoss = targetCustomers.reduce((loss, c) => {\r\n          const estimatedChurnRate = c.riskScore / 100;\r\n          return loss + (c.MRR * estimatedChurnRate);\r\n        }, 0);\r\n    \r\n        // 2. Simulated calculation (applying mitigation effects to reduce the rate)\r\n        const simulatedMRRLoss = targetCustomers.reduce((loss, c) => {\r\n          const estimatedChurnRate = c.riskScore / 100;\r\n          let reduction = 0;\r\n          \r\n          // Apply reduction based on customer characteristics and strategy effectiveness\r\n          if (c.MRR > 500) reduction += discountEffect;\r\n          if (c.supportTickets > 3) reduction += supportEffect;\r\n          if (c.lastActivityDays > 14) reduction += campaignEffect;\r\n          \r\n          reduction = Math.min(reduction, 0.95);\r\n    \r\n          // Calculate the new, reduced churn rate\r\n          const newChurnRate = estimatedChurnRate * (1 - reduction);\r\n          return loss + (c.MRR * newChurnRate);\r\n        }, 0);\r\n    \r\n        const projectedMRRSaved = potentialMRRLoss - simulatedMRRLoss;\r\n    \r\n        return {\r\n          currentTotalMRR,\r\n          potentialMRRLoss,\r\n          simulatedMRRLoss,\r\n          projectedMRRSaved,\r\n          targetCustomerCount: targetCustomers.length\r\n        };\r\n      }, [enhancedCustomers, whatIfData]);\r\n\r\n\r\n      const ResultBox = ({ title, value, color, isLarge = false }) => {\r\n        const colorClasses = {\r\n          red: 'bg-red-50 text-red-700 border-red-300',\r\n          green: 'bg-green-50 text-green-700 border-green-300',\r\n          blue: 'bg-blue-50 text-blue-700 border-blue-300',\r\n          orange: 'bg-yellow-50 text-yellow-700 border-yellow-300',\r\n        };\r\n        return (\r\n          <div className={`p-4 rounded-xl border ${colorClasses[color]} ${isLarge ? 'col-span-1 sm:col-span-2' : ''}`}>\r\n            <p className={`text-sm font-medium ${isLarge ? 'text-lg' : ''}`}>{title}</p>\r\n            <p className={`text-3xl font-extrabold ${isLarge ? 'text-5xl my-2' : 'mt-1'}`}>{value}</p>\r\n          </div>\r\n        );\r\n      };\r\n\r\n  return (\r\n    <div className=\"p-4 md:p-8\" ref={chartRef}>\r\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-6 border-b pb-2\">Scenario Modeling: MRR Retention</h2>\r\n          \r\n          {enhancedCustomers.length === 0 ? (\r\n            <NoDataMessage />\r\n          ) : (\r\n            <div className=\"bg-white p-6 shadow-xl rounded-xl border border-blue-100 mb-8\">\r\n              <h3 className=\"text-xl font-extrabold text-blue-800 mb-4 flex items-center\">\r\n                <svg className=\"w-6 h-6 mr-2 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"></path></svg>\r\n                Forecasted MRR Savings\r\n              </h3>\r\n              <p className=\"text-gray-600 mb-4\">Simulate the impact of retention strategies by adjusting their estimated effectiveness on high-risk customers.</p>\r\n        \r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Target Risk Level</label>\r\n                  <select\r\n                    aria-label=\"Target risk level selector\"\r\n                    value={whatIfData.selectedRiskLevel}\r\n                    onChange={(e) => setWhatIfData({ ...whatIfData, selectedRiskLevel: e.target.value })}\r\n                    className=\"mt-1 block w-full rounded-lg border-gray-300 shadow-sm p-2 bg-gray-50 focus:ring-blue-500 focus:border-blue-500 transition\"\r\n                  >\r\n                    <option value=\"All\">All Customers</option>\r\n                    <option value=\"High\">High Risk Only (Score &ge; 70)</option>\r\n                    <option value=\"Medium\">Medium Risk Only (Score 40-69)</option>\r\n                  </select>\r\n                </div>\r\n                \r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Saved Scenarios</label>\r\n                  <div className=\"mt-1 flex space-x-2\">\r\n                    <input aria-label=\"Scenario name\" value={scenarioName} onChange={(e) => setScenarioName(e.target.value)} placeholder=\"Name scenario (optional)\" className=\"flex-1 p-2 rounded border bg-white\" />\r\n                        <button aria-label=\"Save scenario\" onClick={saveScenario} className=\"px-3 py-1 bg-indigo-600 text-white rounded text-sm\">Save</button>\r\n                        <button aria-label=\"Export scenario CSV\" onClick={exportScenarioCsv} className=\"px-3 py-1 bg-green-500 text-white rounded text-sm\">Export CSV</button>\r\n                        <button aria-label=\"Generate summary\" onClick={generateSummary} className=\"px-3 py-1 bg-gray-500 text-white rounded text-sm\">Summary</button>\r\n                  </div>\r\n                  <div className=\"mt-2 max-h-40 overflow-auto border rounded bg-gray-50 p-2\">\r\n                    {savedScenarios.length === 0 ? (\r\n                      <div className=\"text-xs text-gray-500\">No saved scenarios</div>\r\n                    ) : (\r\n                      (() => {\r\n                        // build refs for the list\r\n                        const itemRefs = savedScenarios.map(() => React.createRef());\r\n                        return savedScenarios.map((s, idx) => {\r\n                          const ref = itemRefs[idx];\r\n                          const onKey = (e) => {\r\n                            if (e.key === 'ArrowDown') { e.preventDefault(); const next = itemRefs[idx+1] || itemRefs[0]; next && next.current && next.current.focus(); }\r\n                            if (e.key === 'ArrowUp') { e.preventDefault(); const prev = itemRefs[idx-1] || itemRefs[itemRefs.length-1]; prev && prev.current && prev.current.focus(); }\r\n                            if (e.key === 'Home') { e.preventDefault(); itemRefs[0] && itemRefs[0].current && itemRefs[0].current.focus(); }\r\n                            if (e.key === 'End') { e.preventDefault(); itemRefs[itemRefs.length-1] && itemRefs[itemRefs.length-1].current && itemRefs[itemRefs.length-1].current.focus(); }\r\n                            if (e.key === 'Enter') { e.preventDefault(); loadScenario(s); }\r\n                          };\r\n\r\n                          return (\r\n                            <div key={s.id} className={`flex items-center justify-between p-1 rounded ${selectedScenarioId === s.id ? 'bg-indigo-50 border border-indigo-100' : ''}`}>\r\n                    <button ref={ref} tabIndex={0} onKeyDown={onKey} aria-label={`Load scenario ${s.name}`} onClick={() => loadScenario(s)} className=\"text-left text-sm text-gray-800 truncate focus:outline-none focus:ring-2 focus:ring-indigo-500\">{s.name}</button>\r\n                              <div className=\"flex items-center space-x-2\">\r\n                                <button aria-label={`Load scenario ${s.name}`} title=\"Load\" onClick={() => loadScenario(s)} className=\"px-2 py-0.5 bg-green-100 text-green-700 rounded text-xs\">Load</button>\r\n            <div className=\"mt-3 flex items-center space-x-2\">\r\n              <button aria-label=\"Export scenario JSON\" onClick={() => {\r\n                const payload = { meta: { generatedAt: new Date().toISOString(), name: scenarioName || null }, data: whatIfData, results: simulationResults };\r\n                const blob = new Blob([JSON.stringify(payload, null, 2)], { type: 'application/json' });\r\n                const url = URL.createObjectURL(blob);\r\n                const a = document.createElement('a'); a.href = url; a.download = 'scenario.json'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);\r\n                (showToast || showCustomModal)('Scenario JSON exported.', 'success');\r\n              }} className=\"px-3 py-1 bg-gray-700 text-white rounded text-sm\">Export JSON</button>\r\n\r\n              <label className=\"px-3 py-1 bg-gray-100 rounded text-sm cursor-pointer\">\r\n                Import JSON\r\n                <input type=\"file\" accept=\"application/json\" onChange={(e) => {\r\n                  const f = e.target.files && e.target.files[0]; if (!f) return;\r\n                  const r = new FileReader(); r.onload = (ev) => {\r\n                    try {\r\n                      const obj = JSON.parse(ev.target.result);\r\n                      if (obj && obj.data) { setWhatIfData(obj.data); (showToast || showCustomModal)('Imported scenario JSON.', 'success'); }\r\n                    } catch (err) { (showToast || showCustomModal)('Failed to import JSON.', 'error'); }\r\n                  }; r.readAsText(f);\r\n                }} style={{ display: 'none' }} />\r\n              </label>\r\n\r\n              <button aria-label=\"Restore autosaved draft\" onClick={() => {\r\n                try {\r\n                  const draftKey = 'jarvis_autosave_whatif_v1';\r\n                  const raw = localStorage.getItem(draftKey);\r\n                  if (!raw) { (showToast || showCustomModal)('No autosave draft found.', 'warn'); return; }\r\n                  const d = JSON.parse(raw);\r\n                  setWhatIfData(d);\r\n                  (showToast || showCustomModal)('Restored autosaved draft.', 'success');\r\n                } catch (e) { (showToast || showCustomModal)('Failed to restore draft.', 'error'); }\r\n              }} className=\"px-3 py-1 bg-yellow-500 text-white rounded text-sm\">Restore Draft</button>\r\n            </div>\r\n                                <button aria-label={`Delete scenario ${s.name}`} title=\"Delete\" onClick={() => deleteScenario(s.id)} className=\"px-2 py-0.5 bg-red-100 text-red-700 rounded text-xs\">Delete</button>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        });\r\n                      })()\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n        \r\n              <div className=\"space-y-4\">\r\n                <label className=\"block text-lg font-semibold text-blue-700 pt-2 border-t mt-4\">Retention Strategy Effectiveness (Expected Churn Rate Reduction)</label>\r\n        \r\n                {['Discount Offer', 'Proactive Support', 'Re-engagement Campaign'].map((label, index) => {\r\n                  const key = index === 0 ? 'discountEffect' : index === 1 ? 'supportEffect' : 'campaignEffect';\r\n                  const effect = whatIfData[key];\r\n                  return (\r\n                    <div key={key}>\r\n                      <label className=\"text-sm font-medium text-gray-700 flex justify-between\">\r\n                        <span>{label}</span>\r\n                        <span className=\"font-mono text-blue-600\">{Math.round(effect * 100)}%</span>\r\n                      </label>\r\n                      <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"0.3\" \r\n                        step=\"0.01\"\r\n                        value={effect}\r\n                        aria-label={`${label} effectiveness`}\r\n                        onChange={(e) => setWhatIfData({ ...whatIfData, [key]: parseFloat(e.target.value) })}\r\n                        className=\"w-full h-2 bg-blue-100 rounded-lg appearance-none cursor-pointer range-lg focus:outline-none focus:ring-2 focus:ring-500 mt-1\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n        \r\n              <div className=\"mt-6 border-t border-blue-200 pt-4\">\r\n                <h4 className=\"text-lg font-bold text-gray-800 mb-3\">Simulation Impact:</h4>\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 text-center\">\r\n                  <ResultBox title=\"Potential Loss (No Action)\" value={formatCurrency(simulationResults.potentialMRRLoss)} color=\"red\" />\r\n                  <ResultBox title=\"Projected Loss (With Actions)\" value={formatCurrency(simulationResults.simulatedMRRLoss)} color=\"orange\" />\r\n                  <ResultBox title=\"MRR Projected Saved\" value={formatCurrency(simulationResults.projectedMRRSaved)} color=\"green\" isLarge={true} />\r\n                  <ResultBox title=\"Total Current MRR\" value={formatCurrency(simulationResults.currentTotalMRR)} color=\"blue\" />\r\n                </div>\r\n                <p className=\"text-xs text-gray-500 mt-3 text-right\">Targeting {simulationResults.targetCustomerCount} customer(s).</p>\r\n                {scenarioSummary && (\r\n                  <div className=\"mt-4 p-3 bg-gray-50 rounded border text-sm text-gray-700\">{scenarioSummary}</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// Component 5: Churn Predictor (High-Risk Tracker)\r\nconst ChurnPredictor = ({ enhancedCustomers, handleContactCustomer, seedInitialData, computeChurnWhenMissing, setComputeChurnWhenMissing }) => {\r\n\r\n    const CustomerTable = ({ customers, onContact, seedInitialData }) => (\r\n        <div className=\"bg-white p-6 shadow-xl rounded-xl border border-red-100\">\r\n          <h3 className=\"text-xl font-extrabold text-red-800 mb-4 flex items-center\">\r\n            <svg className=\"w-6 h-6 mr-2 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"></path></svg>\r\n            High-Risk Customers & Contact Tracker\r\n          </h3>\r\n          {customers.length === 0 ? (\r\n            <div className=\"text-center py-8 text-gray-500\">\r\n                No customer data loaded. Please use the **Data Dashboard** to load or seed initial data.\r\n            </div>\r\n          ) : (\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead className=\"bg-gray-50\">\r\n                  <tr>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Customer</th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">MRR</th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Risk Score</th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Last Activity (Days)</th>\r\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                  {/* Filter for High and Medium Risk for the tracker, ignoring Low Risk */}\r\n                  {customers.filter(c => c.riskLevel !== 'Low').map((c) => {\r\n                    const isHighRisk = c.riskLevel === 'High';\r\n                    const rowClass = isHighRisk ? 'bg-red-50 hover:bg-red-100 transition' : 'bg-yellow-50 hover:bg-yellow-100 transition';\r\n    \r\n                    return (\r\n                      <tr key={c.id} className={rowClass}>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n                          {c.name}\r\n                          <span className={`ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${c.riskLevel === 'High' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'}`}>\r\n                            {c.riskLevel}\r\n                          </span>\r\n                        </td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(c.MRR)}</td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                          <div className=\"w-20 bg-gray-200 rounded-full h-2.5\">\r\n                            <div\r\n                              className={`h-2.5 rounded-full ${c.riskLevel === 'High' ? 'bg-red-600' : 'bg-yellow-500'}`}\r\n                              style={{ width: `${c.riskScore.toFixed(0)}%` }}\r\n                              title={`${c.riskScore.toFixed(0)}%`}\r\n                            ></div>\r\n                          </div>\r\n                        </td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                            {c.lastActivityDays} days\r\n                            {c._churnComputed && (\r\n                              <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800\">computed churn</span>\r\n                            )}\r\n                            {c._churnProvided && (\r\n                              <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800\">provided</span>\r\n                            )}\r\n                            {c._churnComputed && c._churnDriver && (\r\n                              <span\r\n                                className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-indigo-100 text-indigo-800\"\r\n                                title={c._churnContributions ? c._churnContributions.map(x => `${x.label}: ${(x.value*100).toFixed(0)}%`).join(' • ') : ''}\r\n                              >\r\n                                {c._churnDriver}\r\n                              </span>\r\n                            )}\r\n                        </td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\r\n                          {c.isContacted ? (\r\n                            <span className=\"inline-flex items-center px-3 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\r\n                              <svg className=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path></svg>\r\n                              Contacted\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              onClick={() => onContact(c.id)}\r\n                              className=\"text-white bg-red-500 hover:bg-red-600 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-xs px-3 py-1.5 transition shadow\"\r\n                            >\r\n                              Mark Contacted\r\n                            </button>\r\n                          )}\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n          <div className=\"mt-4 flex justify-end\">\r\n            <button\r\n              type=\"button\"\r\n              aria-label=\"Seed initial dummy data\"\r\n              onClick={seedInitialData}\r\n              className=\"text-xs text-blue-500 hover:text-blue-700 transition\"\r\n            >\r\n              Seed Initial Dummy Data\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    \r\n  return (\r\n    <div className=\"p-4 md:p-8\">\r\n      <h2 className=\"text-3xl font-bold text-gray-900 mb-6 border-b pb-2\">Churn Predictor: High-Risk Action List</h2>\r\n      {enhancedCustomers.length === 0 ? (\r\n        <NoDataMessage />\r\n      ) : (\r\n        <>\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <p className=\"text-gray-600\">This list ranks customers with a churn risk score of <strong>40 or higher</strong>. Prioritize contacting the highest-risk customers to improve retention.</p>\r\n            <div className=\"flex items-center space-x-3\">\r\n            <label className=\"flex items-center text-sm text-gray-600\">\r\n              <input type=\"checkbox\" checked={computeChurnWhenMissing} onChange={(e) => setComputeChurnWhenMissing(e.target.checked)} className=\"mr-2\" />\r\n              Compute churn heuristically when missing\r\n            </label>\r\n            <button title=\"When enabled, the app will estimate churnProbability for rows that didn't provide it using a simple heuristic based on the computed risk score. Values computed this way will be marked in the table.\" className=\"text-xs text-gray-500 hover:text-gray-700\">?</button>\r\n            </div>\r\n            <div className=\"mt-2 p-3 bg-gray-50 rounded text-sm text-gray-700\">\r\n              <div className=\"mb-1 font-medium\">How the toggle works</div>\r\n              <div className=\"text-xs mb-2\">When enabled, the app will estimate a missing churnProbability from three observable features: Support Tickets, Days since last activity, and MRR. Use the <strong>Settings</strong> tab to adjust the relative importance (weights) of those features; weights are saved to your browser.</div>\r\n              {(() => {\r\n                // read current weights for a tiny inline preview\r\n                let current = { tickets: 0.5, activity: 0.35, mrr: 0.15 };\r\n                try { const raw = localStorage.getItem('jarvis_churn_weights_v1'); if (raw) current = JSON.parse(raw); } catch (e) {}\r\n                const sample = { MRR: 1200, supportTickets: 2, lastActivityDays: 10 };\r\n                // reuse estimator module\r\n                const estMod = require('./utils/churn');\r\n                const res = estMod.default(sample, current);\r\n                const est = (res && typeof res === 'object') ? (res.estimate || 0) : Number(res) || 0;\r\n                return (\r\n                  <div className=\"text-xs text-gray-600\">\r\n                    <div>Current weights: Tickets {Math.round((current.tickets||0)*100)}% • Activity {Math.round((current.activity||0)*100)}% • MRR {Math.round((current.mrr||0)*100)}%</div>\r\n                    <div className=\"mt-1\">Example (MRR 1200, 2 tickets, 10 days inactive): estimated churn ~ <strong className=\"text-blue-700\">{(est*100).toFixed(1)}%</strong></div>\r\n                  </div>\r\n                );\r\n              })()}\r\n            </div>\r\n          </div>\r\n          <CustomerTable\r\n            customers={enhancedCustomers}\r\n            onContact={handleContactCustomer}\r\n            seedInitialData={seedInitialData}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n// Component 6: Settings (Placeholder)\r\nconst Settings = () => (\r\n    <SettingsInner />\r\n);\r\n\r\n// Separate component to enable hooks usage for settings\r\nconst SettingsInner = () => {\r\n  const STORAGE_KEY = 'jarvis_churn_weights_v1';\r\n  const [weights, setWeights] = useState(() => {\r\n    try {\r\n      const raw = localStorage.getItem(STORAGE_KEY);\r\n      if (raw) return JSON.parse(raw);\r\n    } catch (e) {}\r\n    return { tickets: 0.5, activity: 0.35, mrr: 0.15 };\r\n  });\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem(STORAGE_KEY, JSON.stringify(weights)); } catch (e) {}\r\n  }, [weights]);\r\n\r\n  const update = (k, v) => setWeights(prev => {\r\n    // ensure sum remains ~1 by normalizing after update\r\n    const next = { ...prev, [k]: v };\r\n    const s = (next.tickets || 0) + (next.activity || 0) + (next.mrr || 0) || 1;\r\n    return { tickets: (next.tickets || 0) / s, activity: (next.activity || 0) / s, mrr: (next.mrr || 0) / s };\r\n  });\r\n\r\n  return (\r\n    <div className=\"p-4 md:p-8\">\r\n      <h2 className=\"text-3xl font-bold text-gray-900 mb-6 border-b pb-2\">Settings & Configuration</h2>\r\n      <div className=\"p-8 bg-white rounded-xl shadow-xl border border-gray-200 space-y-4\">\r\n        <div className=\"flex justify-between items-center border-b pb-4\">\r\n          <label className=\"text-lg font-medium text-gray-700\">Churn Estimator Weights</label>\r\n        </div>\r\n  <p className=\"text-gray-600\">Adjust how the churn estimator weights features: Support Tickets, Last Activity (days), and MRR (lower MRR — higher risk).</p>\r\n        <div className=\"grid grid-cols-1 gap-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700\">Support Tickets ({Math.round(weights.tickets * 100)}%)</label>\r\n            <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value={weights.tickets} onChange={(e) => update('tickets', Number(e.target.value))} className=\"w-full\" />\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700\">Last Activity ({Math.round(weights.activity * 100)}%)</label>\r\n            <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value={weights.activity} onChange={(e) => update('activity', Number(e.target.value))} className=\"w-full\" />\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700\">MRR ({Math.round(weights.mrr * 100)}%)</label>\r\n            <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value={weights.mrr} onChange={(e) => update('mrr', Number(e.target.value))} className=\"w-full\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"mt-4 p-4 bg-gray-50 rounded border text-sm\">\r\n          <div className=\"flex items-center justify-between mb-2\">\r\n            <div className=\"text-sm text-gray-700 font-semibold\">Estimator preview</div>\r\n            <div className=\"text-xs text-gray-500\">Sample customer</div>\r\n          </div>\r\n          {/* sample customer used to preview weights */}\r\n          {(() => {\r\n            const estimateFn = require('./utils/churn').estimateChurnFromFeatures;\r\n            const sample = { MRR: 1200, supportTickets: 2, lastActivityDays: 10 };\r\n            const res = require('./utils/churn').default(sample, weights);\r\n            const estVal = res && typeof res === 'object' ? (res.estimate ?? 0) : Number(res) || 0;\r\n            return (\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"text-xs text-gray-600\">MRR 1200 • 2 tickets • 10 days inactive</div>\r\n                <div className=\"text-sm font-mono text-blue-700\">{(estVal * 100).toFixed(1)}%</div>\r\n              </div>\r\n            );\r\n          })()}\r\n          <div className=\"mt-2 text-xs text-gray-500\">This preview shows how the current slider weights influence a simple churn estimate. Values are illustrative.</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// No Data Message\r\nconst NoDataMessage = () => (\r\n    <div className=\"text-center py-16 text-xl text-gray-500 font-medium border border-dashed border-gray-300 rounded-xl bg-white shadow-inner\">\r\n        <p className=\"mb-4\">No customer data loaded.</p>\r\n        <p className=\"text-base text-gray-400\">Please go to the **Data Dashboard** tab to load data from a CSV file or seed sample data.</p>\r\n    </div>\r\n);\r\n\r\n\r\n// --- Main App Component ---\r\n\r\nconst App = () => {\r\n  const [view, setView] = useState('dashboard'); \r\n  const [customers, setCustomers] = useState([]);\r\n  // modal state removed; use toasts instead\r\n\r\n  // Toast state: array of { id, message, type }\r\n  const [toasts, setToasts] = useState([]);\r\n  const pushToast = useCallback((message, type = 'info', timeout = 3500) => {\r\n    const id = Date.now().toString() + Math.random().toString(36).slice(2,6);\r\n    setToasts((t) => [{ id, message, type, timeout }].concat(t).slice(0,6));\r\n    return id;\r\n  }, []);\r\n  const removeToast = useCallback((id) => setToasts((t) => t.filter(x => x.id !== id)), []);\r\n  // Chart refs for reliable exports\r\n  const forecastChartRef = useRef(null);\r\n  const simulationChartRef = useRef(null);\r\n\r\n  const showToast = useCallback((message, type = 'info', timeout = 3500) => {\r\n    pushToast(message, type, timeout);\r\n  }, [pushToast]);\r\n\r\n  // Legacy showCustomModal now routes to non-blocking toast (keeps API compatible)\r\n  const showCustomModal = useCallback((message, type = 'info', timeout = 3500) => {\r\n    showToast(message, type, timeout);\r\n  }, [showToast]);\r\n\r\n  // Provide stable refs to the toast/modal functions so deeply nested effects\r\n  // (like TimeSeriesForecast) can call them without needing to include them\r\n  // in dependency lists which can cause identity churn.\r\n  const showToastRef = useRef(showToast);\r\n  const showCustomModalRef = useRef(showCustomModal);\r\n  useEffect(() => { showToastRef.current = showToast; }, [showToast]);\r\n  useEffect(() => { showCustomModalRef.current = showCustomModal; }, [showCustomModal]);\r\n\r\n  // notify helper uses the current ref value\r\n  const notify = useCallback((message, type = 'info', timeout = 3500) => {\r\n    try { return (showToastRef.current || (()=>{}))(message, type, timeout); } catch (e) { /* noop */ }\r\n  }, []);\r\n\r\n  // Handler to receive uploaded data (memoized to avoid identity churn)\r\n  const handleDataUpload = useCallback((newCustomers) => {\r\n    setCustomers(newCustomers);\r\n  }, [setCustomers]);\r\n\r\n  // Function to seed initial dummy data\r\n  const seedInitialData = useCallback(() => {\r\n    const dummyCustomers = [\r\n      { id: 'd1', name: 'Northbridge Systems', MRR: 4200, churnProbability: 0.12, supportTickets: 1, lastActivityDays: 5, contractLengthMonths: 12, isContacted: false },\r\n      { id: 'd2', name: 'Atlas Financial', MRR: 12500, churnProbability: 0.05, supportTickets: 0, lastActivityDays: 2, contractLengthMonths: 24, isContacted: false },\r\n      { id: 'd3', name: 'Horizon HealthTech', MRR: 3200, churnProbability: 0.28, supportTickets: 3, lastActivityDays: 18, contractLengthMonths: 12, isContacted: false },\r\n      { id: 'd4', name: 'Vertex Logistics', MRR: 900, churnProbability: 0.62, supportTickets: 5, lastActivityDays: 40, contractLengthMonths: 6, isContacted: false },\r\n      { id: 'd5', name: 'Aurora Retail', MRR: 2400, churnProbability: 0.18, supportTickets: 2, lastActivityDays: 7, contractLengthMonths: 12, isContacted: false },\r\n      { id: 'd6', name: 'Stratus AI', MRR: 7800, churnProbability: 0.09, supportTickets: 0, lastActivityDays: 1, contractLengthMonths: 36, isContacted: false },\r\n      { id: 'd7', name: 'Bluewater Media', MRR: 600, churnProbability: 0.55, supportTickets: 2, lastActivityDays: 30, contractLengthMonths: 12, isContacted: false },\r\n    ];\r\n    // ensure seeded customers include churn provenance where churnProbability is provided\r\n    const seeded = dummyCustomers.map(c => ({ ...c, _churnProvided: !!(c.churnProbability || c.churnProbability === 0) }));\r\n    setCustomers(seeded);\r\n    (showToast || showCustomModal)(`Successfully added ${dummyCustomers.length} initial customers to memory!`, 'success');\r\n  }, [setCustomers, showCustomModal, showToast]);\r\n\r\n  // Toggle: compute churn heuristics for rows that did not provide churnProbability\r\n  const [computeChurnWhenMissing, setComputeChurnWhenMissing] = useState(true);\r\n  // churn estimator (require to keep module resolution simple in CRA tests)\r\n  // we keep both numeric and detailed exports in utils/churn\r\n  const estimateChurnFromFeatures = require('./utils/churn').estimateChurnFromFeatures; // numeric\r\n  const estimateChurnFromFeaturesDetailed = require('./utils/churn').default; // detailed\r\n\r\n  // Calculate enhanced customer list (including risk score) whenever the raw customer list changes\r\n  const enhancedCustomers = useMemo(() => {\r\n    return customers.map(c => {\r\n      // If churn was not provided and user wants heuristics, compute from riskScore heuristically after riskScore calculation\r\n      const riskScore = calculateChurnRiskScore(c);\r\n      const riskLevel = riskScore >= 70 ? 'High' : riskScore >= 40 ? 'Medium' : 'Low';\r\n      const base = {\r\n        ...c,\r\n        riskScore,\r\n        riskLevel,\r\n      };\r\n\r\n      // churn provenance flags: supplied (_churnProvided) vs computed (_churnComputed)\r\n      let churnProvided = !!c._churnProvided;\r\n      let churnComputed = false;\r\n\r\n  // Compute churn when the user enabled heuristics AND either the CSV didn't provide churn\r\n  // or the churn value is missing/zero. This makes the toggle more robust to uploads\r\n  // where the churn column may be present but cells are empty/zero.\r\n  if (computeChurnWhenMissing && (!churnProvided || !c.churnProbability || Number(c.churnProbability) === 0)) {\r\n        // try estimator using supportTickets / lastActivityDays / MRR\r\n        try {\r\n          // load persisted weights from Settings (if any)\r\n          let weights = null;\r\n          try { const raw = localStorage.getItem('jarvis_churn_weights_v1'); if (raw) weights = JSON.parse(raw); } catch (e) { weights = null; }\r\n          const res = estimateChurnFromFeaturesDetailed(c, weights || undefined);\r\n          // estimator returns { estimate, contributions, mainDriver, raw }\r\n          base.churnProbability = Math.max(0, Math.min(1, Number(res?.estimate) || 0));\r\n          // attach explainability info for UI\r\n          base._churnDriver = res?.mainDriver ? (res.mainDriver.label || res.mainDriver.key) : null;\r\n          base._churnContributions = res?.contributions || null;\r\n          churnComputed = true;\r\n        } catch (e) {\r\n          // fallback to riskScore heuristic\r\n          const v = Math.min(1, Math.max(0, riskScore / 100));\r\n          base.churnProbability = v;\r\n          base._churnDriver = null;\r\n          base._churnContributions = null;\r\n          churnComputed = true;\r\n        }\r\n      }\r\n\r\n      base._churnProvided = churnProvided;\r\n      base._churnComputed = churnComputed;\r\n\r\n      return base;\r\n    }).sort((a, b) => b.riskScore - a.riskScore); // Sort by highest risk\r\n  }, [customers, computeChurnWhenMissing]);\r\n\r\n  // When the user enables/disables the heuristic toggle, apply or revert computed churn into\r\n  // the canonical `customers` state so Overview/Forecast views (which read `customers`) reflect it.\r\n  useEffect(() => {\r\n    // avoid running until estimator is available\r\n    if (!estimateChurnFromFeaturesDetailed) return;\r\n\r\n    if (computeChurnWhenMissing) {\r\n      // compute for rows that did not provide churn and aren't already computed\r\n      const weightsRaw = (() => { try { const raw = localStorage.getItem('jarvis_churn_weights_v1'); return raw ? JSON.parse(raw) : null;} catch (e) { return null; } })();\r\n      const updated = customers.map(c => {\r\n        const provided = !!c._churnProvided;\r\n        const hasChurn = c.churnProbability !== undefined && Number(c.churnProbability) !== 0;\r\n        if (!provided && !hasChurn && !c._churnComputed) {\r\n          try {\r\n            const res = estimateChurnFromFeaturesDetailed(c, weightsRaw || undefined);\r\n            return { ...c, _prevChurn: c.churnProbability, churnProbability: Math.max(0, Math.min(1, Number(res?.estimate) || 0)), _churnComputed: true, _churnDriver: res?.mainDriver ? (res.mainDriver.label || res.mainDriver.key) : null, _churnContributions: res?.contributions || null };\r\n          } catch (e) {\r\n            const fallback = Math.min(1, Math.max(0, calculateChurnRiskScore(c) / 100));\r\n            return { ...c, _prevChurn: c.churnProbability, churnProbability: fallback, _churnComputed: true };\r\n          }\r\n        }\r\n        return c;\r\n      });\r\n      // only set when something changed\r\n      const changed = updated.some((u, i) => u !== customers[i]);\r\n      if (changed) setCustomers(updated);\r\n    } else {\r\n      // revert computed churns back to previous values when toggle is disabled\r\n      const reverted = customers.map(c => {\r\n        if (c._churnComputed) {\r\n          const nc = { ...c };\r\n          if (nc._prevChurn !== undefined) {\r\n            nc.churnProbability = nc._prevChurn;\r\n          }\r\n          delete nc._prevChurn;\r\n          delete nc._churnComputed;\r\n          delete nc._churnDriver;\r\n          delete nc._churnContributions;\r\n          return nc;\r\n        }\r\n        return c;\r\n      });\r\n      const changed = reverted.some((u, i) => u !== customers[i]);\r\n      if (changed) setCustomers(reverted);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [computeChurnWhenMissing, customers]);\r\n\r\n  // Handler to mark customer as contacted\r\n  const handleContactCustomer = useCallback((customerId) => {\r\n    setCustomers(prevCustomers => \r\n        prevCustomers.map(c => \r\n            c.id === customerId ? { ...c, isContacted: true } : c\r\n        )\r\n    );\r\n    (showToast || showCustomModal)(\"Customer marked as contacted! (Local update)\", 'info');\r\n  }, [setCustomers, showCustomModal, showToast]);\r\n\r\n\r\n  // Calculate Overview Data based on current customers\r\n  const overviewData = useMemo(() => {\r\n    let totalMRR = 0;\r\n    let customerCount = 0;\r\n  // Basic aggregations\r\n  customers.forEach(data => {\r\n    totalMRR += Number(data.MRR) || 0;\r\n    customerCount += 1;\r\n  });\r\n\r\n  const avgMrr = customerCount > 0 ? totalMRR / customerCount : 0;\r\n  const totalRevenue = totalMRR * 12; // Annualized\r\n\r\n  // Heuristic churn and NRR estimates (best-effort without event history)\r\n  // We approximate 'at-risk' customers as churnProbability >= 0.5\r\n  const atRiskCustomers = customers.filter(c => Number(c.churnProbability) >= 0.5);\r\n  const churnedMRR = atRiskCustomers.reduce((s, c) => s + (Number(c.MRR) || 0), 0);\r\n  const churnRateByCount = customerCount > 0 ? (atRiskCustomers.length / customerCount) : 0;\r\n\r\n  // Estimated expansion MRR heuristic: customers with churnProbability < 0.2 are 'expanding' slightly\r\n  const expansionCustomers = customers.filter(c => Number(c.churnProbability) < 0.2);\r\n  const expansionMRR = expansionCustomers.reduce((s, c) => s + ((Number(c.MRR) || 0) * 0.02), 0); // assume 2% expansion\r\n\r\n  // NRR estimate: (startingMRR + expansion - churn) / startingMRR\r\n  const estimatedNRR = totalMRR > 0 ? ((totalMRR + expansionMRR - churnedMRR) / Math.max(1, totalMRR)) : 1;\r\n\r\n  const monthlySeries = computeMonthlySeries(customers);\r\n\r\n  return {\r\n    customerCount,\r\n    totalMRR,\r\n    avgMrr,\r\n    totalRevenue,\r\n    churnedMRR,\r\n    churnRateByCount,\r\n    expansionMRR,\r\n    estimatedNRR,\r\n    monthlySeries,\r\n  };\r\n  }, [customers]);\r\n\r\n  // Onboarding modal (show once)\r\n  const [showOnboard, setShowOnboard] = useState(() => {\r\n    try { return !localStorage.getItem('jarvis_onboard_shown_v1'); } catch (e) { return true; }\r\n  });\r\n  const dismissOnboard = useCallback(() => {\r\n    try { localStorage.setItem('jarvis_onboard_shown_v1', '1'); } catch (e) {}\r\n    setShowOnboard(false);\r\n  }, []);\r\n\r\n\r\n  const renderView = () => {\r\n    switch (view) {\r\n      case 'dashboard':\r\n        return <DataDashboard onDataUpload={handleDataUpload} showCustomModal={showCustomModal} seedInitialData={seedInitialData} showToast={showToast} />;\r\n      case 'overview':\r\n        return <DataOverview overviewData={overviewData} />;\r\n      case 'forecast':\r\n        return <TimeSeriesForecast chartRef={forecastChartRef} monthlySeries={overviewData.monthlySeries} showCustomModal={showCustomModal} showToast={showToast} showToastRef={showToastRef} showCustomModalRef={showCustomModalRef} />;\r\n      case 'simulation':\r\n        return <WhatIfSimulation enhancedCustomers={enhancedCustomers} showCustomModal={showCustomModal} chartRef={simulationChartRef} showToast={showToast} />;\r\n      case 'churn':\r\n        return <ChurnPredictor enhancedCustomers={enhancedCustomers} handleContactCustomer={handleContactCustomer} seedInitialData={seedInitialData} computeChurnWhenMissing={computeChurnWhenMissing} setComputeChurnWhenMissing={setComputeChurnWhenMissing} />;\r\n      case 'settings':\r\n        return <Settings />;\r\n      default:\r\n        return <DataDashboard onDataUpload={handleDataUpload} showCustomModal={showCustomModal} seedInitialData={seedInitialData} />;\r\n    }\r\n  };\r\n\r\n  const navItemClass = (currentView) => (\r\n    `px-4 py-2 text-sm font-medium rounded-t-lg transition-colors duration-150 ${\r\n      view === currentView\r\n        ? 'bg-white text-blue-700 border-b-2 border-blue-700 font-semibold'\r\n        : 'text-gray-500 hover:text-blue-600 hover:bg-gray-100'\r\n    }`\r\n  );\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 antialiased\">\r\n        {/* Load Tailwind CSS */}\r\n        <script src=\"https://cdn.tailwindcss.com\"></script>\r\n        {/* Set Inter font */}\r\n        <style>{`@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap'); body { font-family: 'Inter', sans-serif; }`}</style>\r\n      \r\n      <header className=\"bg-white shadow-md sticky top-0 z-10\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex flex-col md:flex-row justify-between items-center\">\r\n      <div className=\"flex items-center space-x-3\">\r\n        <img src={logo} alt=\"jArvIs360 by Data2Metrics\" className=\"h-10 w-10 object-contain\" />\r\n        <div>\r\n          <div className=\"text-xs text-gray-500\">Data2Metrics</div>\r\n          <h1 className=\"text-2xl font-extrabold text-gray-900\">jArvIs360</h1>\r\n        </div>\r\n      </div>\r\n          <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\r\n              <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-800`}>\r\n                Local Memory Mode\r\n              </span>\r\n              <AuthPanel showToast={showToast} />\r\n            </div>\r\n        </div>\r\n      </header>\r\n      {showOnboard && (\r\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40\">\r\n          <div className=\"bg-white rounded-lg shadow-xl max-w-lg w-full p-6\">\r\n            <h2 className=\"text-2xl font-bold mb-2\">Welcome to Jarvis360</h2>\r\n            <p className=\"text-gray-600 mb-4\">Quickly upload a CSV or load the demo data to see MRR forecasting, churn risk, and run what-if simulations — no setup required.</p>\r\n            <div className=\"flex justify-end space-x-2\">\r\n              <button className=\"px-4 py-2 rounded text-sm bg-gray-100\" onClick={dismissOnboard}>Dismiss</button>\r\n              <button className=\"px-4 py-2 rounded text-sm bg-blue-600 text-white\" onClick={() => { dismissOnboard(); document.getElementById('load-demo-btn')?.click?.(); }}>Load Demo</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        {/* Navigation Tabs */}\r\n        <nav className=\"flex space-x-1 mt-4 border-b border-gray-200 overflow-x-auto whitespace-nowrap\">\r\n            <button type=\"button\" aria-label=\"Go to Data Intake\" onClick={() => setView('dashboard')} className={navItemClass('dashboard')}>\r\n            Data Intake\r\n          </button>\r\n          <button type=\"button\" aria-label=\"Go to Overview\" onClick={() => setView('overview')} className={navItemClass('overview')}>\r\n            Overview\r\n          </button>\r\n          <button type=\"button\" aria-label=\"Go to Forecasting\" onClick={() => setView('forecast')} className={navItemClass('forecast')}>\r\n            Forecasting\r\n          </button>\r\n          <button type=\"button\" aria-label=\"Go to Scenarios\" onClick={() => setView('simulation')} className={navItemClass('simulation')}>\r\n            Scenarios\r\n          </button>\r\n          <button type=\"button\" aria-label=\"Go to Risk & Actions\" onClick={() => setView('churn')} className={navItemClass('churn')}>\r\n            Risk & Actions\r\n          </button>\r\n          <button type=\"button\" aria-label=\"Go to Administration\" onClick={() => setView('settings')} className={navItemClass('settings')}>\r\n            Administration\r\n          </button>\r\n        </nav>\r\n        \r\n        {/* Content Area */}\r\n        <main className=\"py-6 min-h-[70vh]\">\r\n          {renderView()}\r\n        </main>\r\n      </div>\r\n      \r\n      {/* Toast container (bottom-right) */}\r\n      <div aria-live=\"polite\" className=\"fixed right-4 bottom-4 z-50 flex flex-col-reverse space-y-reverse space-y-2 w-80\">\r\n        {toasts.map(t => (\r\n          <div key={t.id} className=\"mb-2\">\r\n            <Toast id={t.id} message={t.message} type={t.type} duration={t.timeout} onClose={removeToast} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n  {/* CustomModal removed; toasts used instead */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]}]